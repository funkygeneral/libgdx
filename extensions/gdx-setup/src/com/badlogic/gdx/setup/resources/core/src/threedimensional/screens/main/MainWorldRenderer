package %PACKAGE%.screens.main;

import com.badlogic.gdx.graphics.g3d.Renderable;
import com.badlogic.gdx.graphics.g3d.Shader;
import com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute;
import com.badlogic.gdx.graphics.g3d.environment.DirectionalLight;
import com.badlogic.gdx.graphics.g3d.model.NodePart;
import com.badlogic.gdx.graphics.g3d.shaders.DefaultShader;
import com.badlogic.gdx.graphics.g3d.utils.DefaultTextureBinder;
import com.badlogic.gdx.graphics.g3d.utils.RenderContext;
import %PACKAGE%.extendables.%MAIN_CLASS%WorldRenderer;

public class MainWorldRenderer extends %MAIN_CLASS%WorldRenderer{

    private MainWorld mainWorld;

    MainWorldRenderer(MainWorld mainWorld) {
        super();
        this.mainWorld = mainWorld;

        cam.position.set(0, 3, 8);
        cam.lookAt(0, 4, 0);
        cam.near = 1f;
        cam.far = 300f;
        cam.update();

        environment.add(new DirectionalLight().set(1f, 1f, 1f, 0f, -0.5f, -1f));

        mainWorld.collisionWorld.setDebugDrawer(debugDrawer);
    }

    public void render() {
        super.render();

        modelBatch.begin(cam);
        modelBatch.render(mainWorld.floor.gameObject, environment);
        modelBatch.render(mainWorld.character.gameObject, environment);
        modelBatch.end();

        renderDebug();
    }

    private void renderDebug() {
        if (debugMode) {
            debugDrawer.begin(cam);
            mainWorld.collisionWorld.debugDrawWorld();
            debugDrawer.end();
        }
    }

    public void dispose() {
        shader.dispose();
        modelBatch.dispose();
    }
}
