package %PACKAGE%;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.assets.AssetDescriptor;
import com.badlogic.gdx.assets.AssetManager;
import com.badlogic.gdx.assets.loaders.BitmapFontLoader;
import com.badlogic.gdx.assets.loaders.TextureAtlasLoader;
import com.badlogic.gdx.assets.loaders.resolvers.InternalFileHandleResolver;
import com.badlogic.gdx.assets.loaders.resolvers.ResolutionFileResolver;
import com.badlogic.gdx.assets.loaders.resolvers.ResolutionFileResolver.Resolution;
import com.badlogic.gdx.audio.Sound;
import com.badlogic.gdx.graphics.g2d.Animation;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.graphics.g2d.NinePatch;
import com.badlogic.gdx.graphics.g2d.ParticleEffect;
import com.badlogic.gdx.graphics.g2d.Sprite;
import com.badlogic.gdx.graphics.g2d.TextureAtlas;
import com.badlogic.gdx.graphics.g3d.Model;

public class Assets {
    public static AssetManager loadingManager = new AssetManager();
    public static AssetManager manager = new AssetManager();

    public static final Resolution[] resolutions = {new Resolution(320, 480, "320dp"), new Resolution(480, 640, "520dp"), new Resolution(640, 820, "720dp"), new Resolution(1000, 1600, "1080dp")};
    public static final ResolutionFileResolver resolver = new ResolutionFileResolver(new InternalFileHandleResolver(), resolutions);


    // LOADING ASSETS
    public static final AssetDescriptor<TextureAtlas> loadingAtlas = new AssetDescriptor<TextureAtlas>("textures/loading.txt", TextureAtlas.class);
    public static Sprite funkyLogo;

    public static final AssetDescriptor<BitmapFont> loadingFont = new AssetDescriptor<BitmapFont>("font/big_font.fnt", BitmapFont.class);

    // 3D MODELS
    public static final AssetDescriptor<Model> macocoDescription = new AssetDescriptor<Model>("models/game_model.g3dj", Model.class);
    public static Model macocoModel;

    // TEXTURE ATLASSES
    public static final AssetDescriptor<TextureAtlas> mainAtlas = new AssetDescriptor<TextureAtlas>("textures/main.txt", TextureAtlas.class);
    public static Sprite playButton;
    public static Animation buttons;

    // FONTS
    public static final AssetDescriptor<BitmapFont> bigFont = new AssetDescriptor<BitmapFont>("font/big_font.fnt", BitmapFont.class);
    public static final AssetDescriptor<BitmapFont> smallFont = new AssetDescriptor<BitmapFont>("font/small_font.fnt", BitmapFont.class);
    public static final AssetDescriptor<BitmapFont> descriptionFont = new AssetDescriptor<BitmapFont>("font/description_font.fnt", BitmapFont.class);

    // SOUNDS
    public static final AssetDescriptor<Sound> clickSound = new AssetDescriptor<Sound>("sounds/click.mp3", Sound.class);

    public static void loadLoading() {
        loadingManager.setLoader(TextureAtlas.class, new TextureAtlasLoader(resolver));
        loadingManager.setLoader(BitmapFont.class, new BitmapFontLoader(resolver));

        loadingManager.load(loadingAtlas);
        loadingManager.load(loadingFont);
    }

    public static void loadLoadingSprites() {
        funkyLogo = new Sprite(loadingManager.get(loadingAtlas).findRegion("funkyLogo"));
    }

    public static void loadManager() {
        // Set Loaders
        manager.setLoader(TextureAtlas.class, new TextureAtlasLoader(resolver));
        manager.setLoader(BitmapFont.class, new BitmapFontLoader(resolver));

        // Load Models
        manager.load(macocoDescription);

        // Load Textures
        manager.load(mainAtlas);

        // Load Sounds
        manager.load(clickSound);

        // Load Font
        manager.load(bigFont);
        manager.load(smallFont);
        manager.load(descriptionFont);
    }

    public static void loadAssets() {
        loadModels();
        loadMain();
    }

    private static void loadModels() {
        macocoModel = manager.get(macocoDescription);
    }

    private static void loadMain() {
        playButton = new Sprite(manager.get(mainAtlas).findRegion("play_button"));
        buttons = new Animation(1, manager.get(mainAtlas).findRegions("button"));
    }

    public static BitmapFont getLoadingFont() {
        BitmapFont fontFile = loadingManager.get(loadingFont);
        return fontFile;
    }

    public static BitmapFont getFont(AssetDescriptor<BitmapFont> assetDescriptor) {
        BitmapFont fontFile = manager.get(assetDescriptor);
        return fontFile;
    }


    public static Sound getSound(AssetDescriptor<Sound> assetDescriptor) {
        Sound soundFile = manager.get(assetDescriptor);
        return soundFile;
    }

    public static void playSound(AssetDescriptor<Sound> sound) {
        if (Settings.soundEnabled) getSound(sound).play(1);
    }

    public static void dispose() {
        loadingManager.dispose();
        manager.dispose();
    }
}