package %PACKAGE%;

import com.badlogic.gdx.ApplicationAdapter;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;

public class GameScreen implements Screen, InputProcessor {
    private static final String TAG = GameScreen.class.getSimpleName();

    public float CENTER_X, CENTER_Y, STAGE_WIDTH, STAGE_HEIGHT;
    public static final int X_SPEED = 50;

    private %MAIN_CLASS% game;

    PerspectiveCamera cam;
    ModelBatch modelBatch;
    Environment environment;
    DebugDrawer debugDrawer;

    Application.ApplicationType appType;

    public GameScreen(Macoco game) {
        this.game = game;

        this.CENTER_X = Gdx.graphics.getWidth() / 2;
        this.CENTER_Y = Gdx.graphics.getHeight() / 2;
        this.STAGE_WIDTH = Gdx.graphics.getWidth();
        this.STAGE_HEIGHT = Gdx.graphics.getHeight();

        appType = Gdx.app.getType();

        modelBatch = new ModelBatch();
        environment = new Environment();
        environment.set(new ColorAttribute(ColorAttribute.AmbientLight, 0.2f, 0.2f, 0.2f, 0.2f));
        environment.add(new DirectionalLight().set(1f, 0.9f, 0.7f, -0.75f, -0.85f, 0.75f));

        cam = new PerspectiveCamera(67, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
        cam.position.set(25, 10, 0);
        cam.lookAt(0, 0, 0);
        cam.near = 1f;
        cam.far = 300f;
        cam.update();

        // Bullet Debugging
        debugDrawer = new DebugDrawer();
        debugDrawer.setDebugMode(btIDebugDraw.DebugDrawModes.DBG_MAX_DEBUG_DRAW_MODE);
        world.collisionWorld.setDebugDrawer(debugDrawer);
    }

    @Override
    public void show() {
        Gdx.input.setCatchBackKey(true);
        Gdx.input.setInputProcessor(this);
    }

    @Override
    public void render(float delta) {
        Gdx.gl.glClearColor(0.3f, 0.3f, 0.3f, 1.f);
        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT | GL20.GL_DEPTH_BUFFER_BIT);

        drawDebug(false);

        modelBatch.begin(cam);
        for (MacocoCoconut coconut : world.coconuts) {
            if(coconut.active) modelBatch.render(coconut.gameObject, environment);
        }
        modelBatch.render(world.water.gameObject, environment);
        modelBatch.end();
    }

    public void drawDebug(boolean debugMode) {
        if (debugMode) {
            debugDrawer.begin(cam);
            world.collisionWorld.debugDrawWorld();
            debugDrawer.end();
        }
    }

    @Override
    public void dispose() {
        world.dispose();
        modelBatch.dispose();
    }

    @Override
    public void pause() {
    }

    @Override
    public void resume() {
    }

    @Override
    public void hide() {

    }

    @Override
    public void resize(int width, int height) {
    }

    /**
     * INPUTS
     *
     *
     */

    @Override
    public boolean keyDown(int keycode) {
        switch (keycode) {
            case Input.Keys.SPACE:
                world.macoco.type = Monkey.MONKEY_TYPE_BEND;
                break;
        }
        return false;
    }

    private void rotate(float angle) {
        world.macoco.setPosition(MacocoHelper.rotatePoint(world.macoco.position, world.treePosition, angle));
        world.macoco.rotate(0, 1, 0, -angle);
        cameraPosition = MacocoHelper.rotatePoint(cameraPosition, world.treePosition, angle);
        cam.position.set(cameraPosition);
        cameraAngle -= angle;
        cam.rotate(-angle, 0, 1, 0);
        cam.update();
    }

    @Override
    public boolean keyUp(int keycode) {
        switch (keycode) {
            case Input.Keys.SPACE:
                world.macoco.type = Monkey.MONKEY_TYPE_STRETCH;
                break;
        }
        return false;
    }

    @Override
    public boolean keyTyped(char character) {
        return false;
    }

    @Override
    public boolean touchDown(int screenX, int screenY, int pointer, int button) {
        //world.macoco.type = Monkey.MONKEY_TYPE_BEND;
        return false;
    }

    @Override
    public boolean touchUp(int screenX, int screenY, int pointer, int button) {
        //world.macoco.type = Monkey.MONKEY_TYPE_STRETCH;
        return false;
    }

    @Override
    public boolean touchDragged(int screenX, int screenY, int pointer) {
        return false;
    }

    @Override
    public boolean mouseMoved(int screenX, int screenY) {
        return false;
    }

    @Override
    public boolean scrolled(int amount) {
        return false;
    }
}
